<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿康</title>
  
  <subtitle>踩的坑多了，不容易摔跤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/kenghuo/"/>
  <updated>2018-08-07T08:20:55.030Z</updated>
  <id>https://github.com/kenghuo/</id>
  
  <author>
    <name>kenghuo阿康</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Redux 入门</title>
    <link href="https://github.com/kenghuo/2018/08/07/redux/"/>
    <id>https://github.com/kenghuo/2018/08/07/redux/</id>
    <published>2018-08-07T06:17:05.000Z</published>
    <updated>2018-08-07T08:20:55.030Z</updated>
    
    <content type="html"><![CDATA[<p>React Redux 入门<br>React 数据管理工具</p><a id="more"></a><h3 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h3><ul><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态（一般指非父子组件）</li></ul><p>注意：</p><ul><li>Redux 会导致项目结构变的更复杂，因此非必要，尽量还是别使用 Redux</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>store：Redux 用来保存数据的一个对象<br>dispatch：Redux 用来改变 store 数据的方法<br>state：Redux 中现在储存的 store 数据  </p><p>store 无法直接改变自身状态，需要调用对应的 dispatch 方法发送一个 action 来改变数据<br>因此需要一个中间件来保证 Redux 的正常执行</p><h3 id="在-react-中使用"><a href="#在-react-中使用" class="headerlink" title="在 react 中使用"></a>在 react 中使用</h3><p>首先需要在根组件创建 store，通过 Provider 将 store 挂载到全局  </p><p>React 中常用的中间件为 redux-thunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">/* redux */</span><br><span class="line">import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line"></span><br><span class="line">/* 写好的redux */</span><br><span class="line">import rootReducer from &apos;./reduxs/index.js&apos;;</span><br><span class="line"></span><br><span class="line">import Demo from &apos;./component/demo.jsx&apos;;</span><br><span class="line"></span><br><span class="line">/* 创建store */</span><br><span class="line">const store = createStore(</span><br><span class="line">  rootReducer,</span><br><span class="line">  compose(</span><br><span class="line">    applyMiddleware(thunk) // 中间件</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      /* 传递 store */</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Demo /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>在要用数据的组件中通过 connect 暴露组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; change_title &#125; from &apos;../reduxs/demo.js&apos;;</span><br><span class="line"> </span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">                &lt;p&gt; &#123;this.props.title&#125; &lt;/p&gt;</span><br><span class="line">                &lt;button onClick=&#123; () =&gt; this.props.change_title(&apos;piu&apos;)&#125; &gt; piu &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapPropsToState = state =&gt; (&#123;</span><br><span class="line">    state,</span><br><span class="line">    title: state.demo.title</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToState = dispatch =&gt; (&#123;</span><br><span class="line">    change_title: title =&gt; dispatch(change_title(title))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(mapPropsToState, mapDispatchToState)(Demo);</span><br></pre></td></tr></table></figure><p>控制 redux 中 store 的一般单独创建文件存放</p><p><code>reduxs/index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import demo from &apos;./demo.js&apos;;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    demo</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>每个组件的数据可以分别存放</p><p>例如 <code>demo.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// init state</span><br><span class="line">const initialState = &#123;</span><br><span class="line">    title: &apos;测试标题&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const TITLE = &apos;demo/change_title&apos;;</span><br><span class="line"></span><br><span class="line">export function change_title(title)&#123;</span><br><span class="line">    return (dispatch: Function) =&gt; &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">            type: TITLE,</span><br><span class="line">            title</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// redux reducer</span><br><span class="line">export default (state: Object = initialState, action: Action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line"></span><br><span class="line">        case TITLE:</span><br><span class="line">            return &#123; ...state,</span><br><span class="line">                title: action.title</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样一个完整的数据结构创建完成了</p><p>最终文件目录如下</p><p><img src="/img/react-demo.png" alt="目录结构"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Redux 入门&lt;br&gt;React 数据管理工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://github.com/kenghuo/tags/React/"/>
    
      <category term="Redux" scheme="https://github.com/kenghuo/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>github 绑定独立域名</title>
    <link href="https://github.com/kenghuo/2018/08/07/domain/"/>
    <id>https://github.com/kenghuo/2018/08/07/domain/</id>
    <published>2018-08-07T05:45:16.000Z</published>
    <updated>2018-08-07T06:16:56.554Z</updated>
    
    <content type="html"><![CDATA[<p>github 绑定独立域名</p><a id="more"></a><h3 id="购买域名-添加解析"><a href="#购买域名-添加解析" class="headerlink" title="购买域名, 添加解析"></a>购买域名, 添加解析</h3><p>我的域名从阿里云购买的，以阿里云为例说明流程</p><ul><li><p>在阿里云域名服务购买自己喜欢的域名<br><a href="https://wanwang.aliyun.com/?spm=5176.8142029.selected.2.28b06d3eSO110Y" target="_blank" rel="noopener">链接</a></p></li><li><p>在阿里云控制台云解析 DNS<br>  <code>添加记录</code> 解析自己的博客地址<br>  <img src="/img/DNS.png" alt="解析DNS"><br>  三个位置依次选中 <code>CNAME</code>  <code>www</code>  <code>博客地址</code><br>  重复操作添加 <code>CNAME</code> <code>@</code> <code>博客地址</code></p></li></ul><p>使用 github 博客页面可以参考 <a href="/2018/07/20/blog">链接</a></p><p>非阿里云购买的域名解析  </p><ul><li><p>控制台域名管理<br>  添加自己购买的域名</p></li><li><p>在自己购买域名的平台修改 DNS </p><p>  <code>dns12.hichina.com</code>   </p><p>  <code>dns11.hichina.com</code></p></li><li><p>控制台云解析 DNS<br>  步骤同上</p></li></ul><h3 id="添加-github-重定向"><a href="#添加-github-重定向" class="headerlink" title="添加 github 重定向"></a>添加 github 重定向</h3><p>在博客根目录下添加文件 <code>CNAME</code>，文件内写入域名<br>注意：</p><ul><li>文件没有后缀名  </li><li>写入内容仅域名地址  例如：<code>kenghuo.ink</code></li></ul><p>或者在 github 仓库 setting 中 Github Page 添加设置 Custom domain 添加域名</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github 绑定独立域名&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://github.com/kenghuo/tags/blog/"/>
    
      <category term="Github" scheme="https://github.com/kenghuo/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Web Worker</title>
    <link href="https://github.com/kenghuo/2018/08/03/worker/"/>
    <id>https://github.com/kenghuo/2018/08/03/worker/</id>
    <published>2018-08-03T07:45:39.000Z</published>
    <updated>2018-08-03T09:27:20.795Z</updated>
    
    <content type="html"><![CDATA[<p>web worker 的使用</p><a id="more"></a><p>JS 为单线程, 一些计算量较大的代码肯定会影响整体程序的执行速度,<br>而且, 多核计算机的性能也无法高效利用,<br>为了解决这些问题, HTML5 提出 Web Worker , 可以使 JS 一些可以同时进行的事件放在独立的小线程中执行</p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><p>在 worker 子线程中，可以获得下列对象</p><ol><li><p>navigator对象</p></li><li><p>location对象，只读<br> 这里不能进行 location 赋值实现页面跳转！！！</p></li><li><p>XMLHttpRequest对象<br> ajax 请求</p></li><li><p>setTimeout/setInterval方法</p></li><li><p>Application Cache</p></li><li><p>通过importScripts()方法加载其他脚本</p></li><li><p>创建新的Web Worker</p></li></ol><p>worker线程不能获得下列对象</p><ol><li><p>DOM对象</p></li><li><p>window对象</p></li><li><p>document对象</p></li><li><p>parent对象</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>主线程使用 new 新建一个子线程, 参数为线程文件<br><figure class="highlight plain"><figcaption><span>Worker</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var worker = new Worker(&apos;work.js&apos;);</span><br></pre></td></tr></table></figure></p><p>调用 <code>postMessage</code> 方法向子线程传递消息<br>通过 <code>onmessage</code> 监听子线程发送的消息 <code>onerror</code> 监听错误信息  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">worker.postMessage(&#123;name:&apos;Kenghuo&apos;, title: &apos;Hello&apos;&#125;);</span><br><span class="line"></span><br><span class="line">worker.onmessage = function(event)&#123;</span><br><span class="line">    console.log(event);</span><br><span class="line"></span><br><span class="line">    document.getElementById(&apos;title&apos;).innerHTML = event.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.onerror = function(error)&#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子线程</p><p>新建的 work.js 文件</p><p>通过 <code>onmessage</code> 来接收主线程发送的消息<br>通过 <code>postMessage</code> 发送处理完成后的信息<br>通过 <code>importScript</code> 引入别的 JS 文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">importScript(&apos;func.js&apos;);</span><br><span class="line"></span><br><span class="line">onmessage = (event) =&gt; &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">    </span><br><span class="line">    postMessage(add(event.data.title + &apos; &apos; + event.data.name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kenghuo/demo/tree/master/worker">demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web worker 的使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="https://github.com/kenghuo/tags/HTML5/"/>
    
      <category term="worker" scheme="https://github.com/kenghuo/tags/worker/"/>
    
  </entry>
  
  <entry>
    <title>一键分享</title>
    <link href="https://github.com/kenghuo/2018/08/02/share/"/>
    <id>https://github.com/kenghuo/2018/08/02/share/</id>
    <published>2018-08-02T10:26:28.000Z</published>
    <updated>2018-08-03T07:45:09.728Z</updated>
    
    <content type="html"><![CDATA[<p>一键分享</p><a id="more"></a><p>一键分享的代码</p><p>复制这段代码到希望分享的网页, 即可实现一键分享功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">window._bd_share_config = &#123;</span><br><span class="line">    &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: [&quot;tsina&quot;, &quot;weixin&quot;, &quot;mail&quot;, &quot;linkedin&quot;, &quot;copy&quot;, &quot;print&quot;],</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;bdSize&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;slide&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;slide&quot;,</span><br><span class="line">        &quot;bdImg&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;bdPos&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;bdTop&quot;: &quot;100&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">with(document) 0[</span><br><span class="line">    (getElementsByTagName(&apos;head&apos;)[0] || body)  </span><br><span class="line">        .appendChild(createElement(&apos;script&apos;))  </span><br><span class="line">        .src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p><code>注意：</code> JavaScript 严格模式不支持 <code>with</code> 关键字, 需要修改代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">window._bd_share_config = &#123;</span><br><span class="line">    &apos;common&apos;: &#123;</span><br><span class="line">        &apos;bdSnsKey&apos;: &#123;&#125;,</span><br><span class="line">        &apos;bdText&apos;: &apos;&apos;,</span><br><span class="line">        &apos;bdMini&apos;: &apos;1&apos;,</span><br><span class="line">        &apos;bdMiniList&apos;: [&apos;tsina&apos;, &apos;weixin&apos;, &apos;mail&apos;, &apos;linkedin&apos;, &apos;copy&apos;, &apos;print&apos;],</span><br><span class="line">        &apos;bdPic&apos;: &apos;&apos;,</span><br><span class="line">        &apos;bdStyle&apos;: &apos;0&apos;,</span><br><span class="line">        &apos;bdSize&apos;: &apos;32&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;slide&apos;: &#123;</span><br><span class="line">        &apos;type&apos;: &apos;slide&apos;,</span><br><span class="line">        &apos;bdImg&apos;: &apos;3&apos;,</span><br><span class="line">        &apos;bdPos&apos;: &apos;right&apos;,</span><br><span class="line">        &apos;bdTop&apos;: &apos;100&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 这里不支持 with 关键字的代码</span><br><span class="line">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(document.createElement(&apos;script&apos;)).src = </span><br><span class="line">    &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)</span><br></pre></td></tr></table></figure><p><a href="http://share.baidu.com/code" target="_blank" rel="noopener">官方百度分享</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一键分享&lt;/p&gt;
    
    </summary>
    
    
      <category term="share" scheme="https://github.com/kenghuo/tags/share/"/>
    
  </entry>
  
  <entry>
    <title>hexo 和 github 创建博客最简单粗暴的方法</title>
    <link href="https://github.com/kenghuo/2018/07/26/hexo-init/"/>
    <id>https://github.com/kenghuo/2018/07/26/hexo-init/</id>
    <published>2018-07-26T09:31:49.000Z</published>
    <updated>2018-08-02T10:25:15.974Z</updated>
    
    <content type="html"><![CDATA[<p>在 github 上 使用 hexo 创建博客最简单粗暴的方法 </p><a id="more"></a><p>最简单粗暴创建博客的方法</p><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><ul><li>注册 github 账号<br><a href="https://www.github.com" target="_blank" rel="noopener">注册地址</a></li><li>新建个人仓库  </li><li>打开 github page<br>详情见<a href="/2018/07/20/blog/">搭建博客</a></li></ul><p>注册账号之后，需要添加SSH Key<br>使用 git 管理代码需要这东西</p><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><ol><li>安装 nodejs</li></ol><p><a href="https://nodejs.org/dist/v8.11.3/node-v8.11.3-x64.msi" target="_blank" rel="noopener">下载地址</a><br>没有特殊要求直接安装<br>一直下一步就行</p><ol start="2"><li>安装 hexo</li></ol><p>在安装 nodeJS 之后，可以使用 npm 包管理器 安装 hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo hexo-cli -g # 全局安装 hexo</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 git</li></ol><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a><br>根据需要安装对应版本的 git<br>安装成功之后，右键单击出现 Git Bash Here 以及 Git GUI 说明成功</p><h3 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h3><p>找个空文件夹直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>在 hexo init 完成后记得安装包 hexo-deployer-git<br><figure class="highlight plain"><figcaption><span>包</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>修改配置文件 _config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/github用户名 # 提交的账户名</span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/github用户名/github用户名.github.io # 提交的仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>配置完成后，依次键入以下命令<br><figure class="highlight plain"><figcaption><span>提交</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean # 清理原有的文件 public 文件夹</span><br><span class="line">$ hexo generate # 重新打包生成 public 文件夹</span><br><span class="line">$ hexo deploy # 提交文件到指定 github 仓库</span><br></pre></td></tr></table></figure></p><p>在本地预览当前博客效果<br><figure class="highlight plain"><figcaption><span>本地</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean # 清理原有的文件 public 文件夹</span><br><span class="line">$ hexo generate # 重新打包生成 public 文件夹</span><br><span class="line">$ hexo server # 开启本地服务器 4000 端口号</span><br></pre></td></tr></table></figure></p><p>浏览器 localhost:4000 可以看到当前博客生成内容</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 github 上 使用 hexo 创建博客最简单粗暴的方法 &lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://github.com/kenghuo/tags/blog/"/>
    
      <category term="hexo" scheme="https://github.com/kenghuo/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 常见麻烦</title>
    <link href="https://github.com/kenghuo/2018/07/26/hexo/"/>
    <id>https://github.com/kenghuo/2018/07/26/hexo/</id>
    <published>2018-07-26T08:50:19.000Z</published>
    <updated>2018-08-02T10:25:13.976Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 使用过程中遇到的麻烦</p><a id="more"></a><h3 id="没反应"><a href="#没反应" class="headerlink" title="没反应"></a>没反应</h3><p>命令行键入 hexo d 毫无反应</p><p><img src="/img/deploy.png" alt="无反应"></p><ol><li>原因: 缺少包 hexo-deployer-git</li></ol><p>hexo 从版本 2.x.x 升级到 3.x.x 删除了内置的 git 包<br>需要单独安装 hexo-deployer-git 包</p><ol start="2"><li>原因: 配置文件 url 以及 deploy 未配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/username  # 这里是提交的账户</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io # 这里是提交仓库的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 使用过程中遇到的麻烦&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://github.com/kenghuo/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="https://github.com/kenghuo/2018/07/26/git/"/>
    <id>https://github.com/kenghuo/2018/07/26/git/</id>
    <published>2018-07-26T06:12:46.000Z</published>
    <updated>2018-08-02T10:26:19.731Z</updated>
    
    <content type="html"><![CDATA[<p>git 常用命令</p><a id="more"></a><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>克隆或者叫下载, 将远程服务器上的仓库文件下载到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitee.com:xxx `&lt;dirName&gt;`  </span><br><span class="line">git clone https://gitee.com/xxx `&lt;dirName&gt;`</span><br></pre></td></tr></table></figure><p>将仓库 <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a>:xxx 中的文件下载到本地 <code>./dirName</code> 目录下<br>将仓库 <a href="https://gitee.com/xxx" target="_blank" rel="noopener">https://gitee.com/xxx</a> 中的文件下载到本地 <code>./dirName</code> 目录下</p><p>两个命令的区别在于 使用 SSH 下载的内容提交不需要登录名以及密码<br>注意：不论哪个 git 命令提交代码都需要 <code>SSH公匙</code> 验证</p><h2 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h2><p>查看公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh # 进入指定文件夹  </span><br><span class="line">$ ls # 查看文件夹下的文件</span><br></pre></td></tr></table></figure><p>存在这两个文件文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>文件 id_rsa.pub 储存当前生成的随机数公钥</p><p>否则生成公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">连续3个回车</span><br></pre></td></tr></table></figure></p><p>在 github 设置生成的公钥<br>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></p><p>出现文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure></p><p>设置公钥成功</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>将修改内容交于 git 控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add . # 提交全部修改的文件</span><br><span class="line">$ git add xxx # 提交指定文件</span><br></pre></td></tr></table></figure></p><p>将提交的修改添加到缓冲区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;xxx&apos; # xxx 提交的注释性内容</span><br></pre></td></tr></table></figure></p><p>上传提交的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;branchName&gt; # 提交指定分支的修改</span><br></pre></td></tr></table></figure></p><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><ul><li><p>添加分支 git branch <code>&lt;newBranchName&gt;</code> 添加新分支 newBranchName<br>新分支的改动不会影响原有分支的文件 注意切换分支之前对当前分支进行提交 (commit) 操作<br>推送之前注意对应分支, 除了默认分支不需要以外, 其余分支提交 git push <code>origin &lt;branchName&gt;</code></p></li><li><p>切换分支 git checkout <code>&lt;branchName&gt;</code> 切换到分支 branchName<br>多个分支之间的文件不受彼此影响</p></li><li><p>合并分支修改 git merge <code>&lt;branchName&gt;</code>  将当前分支与 branchName 分支合并</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 常用命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://github.com/kenghuo/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://github.com/kenghuo/2018/07/24/sort/"/>
    <id>https://github.com/kenghuo/2018/07/24/sort/</id>
    <published>2018-07-24T01:07:03.000Z</published>
    <updated>2018-08-02T10:25:01.332Z</updated>
    
    <content type="html"><![CDATA[<p>几种排序算法</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序<br>一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    console.time(&apos;原始冒泡排序时间&apos;);</span><br><span class="line">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123; // 相邻元素两两对比</span><br><span class="line">                let temp = arr[j+1]; // 元素交换</span><br><span class="line">                arr[j+1] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;原始冒泡排序时间&apos;);</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化<br>标记已经完成的排序序号, 从未排序的位置开始进行排序, 减少内层循环次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort2(arr) &#123;</span><br><span class="line">    let i = arr.length-1; //初始时,最后位置保持不变</span><br><span class="line">    console.time(&apos;优化冒泡排序时间&apos;);</span><br><span class="line">    while ( i&gt; 0) &#123;</span><br><span class="line">        let pos= 0; // 每趟开始时,无记录交换</span><br><span class="line">        for (let j = 0; j&lt; i; j++)&#123;</span><br><span class="line">            if (arr[j]&gt; arr[j+1]) &#123;</span><br><span class="line">                pos= j; //记录交换的位置</span><br><span class="line">                let tmp = arr[j];</span><br><span class="line">                arr[j]=arr[j+1];</span><br><span class="line">                arr[j+1]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i = pos; // 为下一趟排序作准备</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;优化冒泡排序时间&apos;);</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>升级版冒泡排序<br>从前向后同时进行排序操作, 记录排序序号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort3(arr3) &#123;</span><br><span class="line">　　var low = 0;</span><br><span class="line">　　var high= arr.length-1; //设置变量的初始值</span><br><span class="line">　　var tmp,j;</span><br><span class="line">　　console.time(&apos;2.改进后冒泡排序耗时&apos;);</span><br><span class="line">　　while (low &lt; high) &#123;</span><br><span class="line">　　　　for (j= low; j&lt; high; ++j) &#123;         //正向冒泡,找到最大者</span><br><span class="line">　　　　　　if (arr[j]&gt; arr[j+1]) &#123;</span><br><span class="line">　　　　　　　　tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　--high;  //修改high值, 前移一位</span><br><span class="line">　　　　for (j=high; j&gt;low; --j) &#123;          //反向冒泡,找到最小者</span><br><span class="line">　　　　　　if (arr[j]&lt;arr[j-1]) &#123;</span><br><span class="line">　　　　　　　　tmp = arr[j]; arr[j]=arr[j-1];arr[j-1]=tmp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;　</span><br><span class="line">　　　　++low;  //修改low值,后移一位</span><br><span class="line">　　&#125;</span><br><span class="line">　　console.timeEnd(&apos;2.改进后冒泡排序耗时&apos;);</span><br><span class="line">　　return arr3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序<br>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，<br>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>以此类推，直到所有元素均排序完毕。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    var minIndex, temp;</span><br><span class="line">    console.time(&apos;选择排序耗时&apos;); // 计时开始</span><br><span class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        for (var j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123; //寻找最小的数</span><br><span class="line">                minIndex = j; //将最小数的索引保存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;选择排序耗时&apos;); // 计时结束</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序<br>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到 {\displaystyle O(1)} {\displaystyle O(1)}的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort(array) &#123;</span><br><span class="line">    console.time(&apos;插入排序耗时：&apos;);</span><br><span class="line">    for (var i = 1; i &lt; array.length; i++) &#123;</span><br><span class="line">        var key = array[i];</span><br><span class="line">        var j = i - 1;</span><br><span class="line">        while ( array[j] &gt; key) &#123;</span><br><span class="line">            array[j + 1] = array[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j + 1] = key;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;插入排序耗时：&apos;);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几种排序算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://github.com/kenghuo/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="https://github.com/kenghuo/2018/07/23/react-lifecycle/"/>
    <id>https://github.com/kenghuo/2018/07/23/react-lifecycle/</id>
    <published>2018-07-23T01:04:57.000Z</published>
    <updated>2018-08-02T10:25:09.210Z</updated>
    
    <content type="html"><![CDATA[<p>React 生命周期</p><a id="more"></a><p>React v16.x.x 生命周期发生变化</p><h1 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h1><ul><li>挂载阶段 <a href="#mount" target="_self">#</a></li><li>更新阶段 <a href="#update" target="_self">#</a></li><li>卸载阶段 <a href="#unmount" target="_self">#</a></li></ul><p><span id="mount"></span></p><h2 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h2><p>constructor(props) 初始化state 绑定this 通过super方法获取props<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props);                           // 继承父组件 props</span><br><span class="line">    this.state = &#123;                          // 初始化 state</span><br><span class="line">        count: 1</span><br><span class="line">    &#125;;</span><br><span class="line">    this.toggle = this.toggle.bind(this);   // 内部方法绑定 this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>static getDerivedStateFromProps(props, state) 在调用 render 方法之前被调用，包括初始装载（mount）和后续更新时。 它应该返回一个更新 state(状态) 的对象，或者返回 null 不更新任何 state(状态)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static getDerivedStateFromProps(props, state) &#123;</span><br><span class="line">    if(props.user.id)&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            username: props.user.name</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;    // 这里必须返回对象 否则报错</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>render() 生成虚拟 DOM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    return &lt;div&gt;&#123;this.state.count&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>componentDidMount dom树挂载时执行的操作 插入 DOM 树时调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    document.getElementById(&apos;#random) = &apos;/path.jsp&apos;; // 登录验证码 在虚拟 DOM 插入 DOM 树之后才能通过 JS 操作 DOM 结构</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="update"></span></p><h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><p>componentDidUpdate(prevProps, prevState) dom 更新时调用, props 以及 state 发生改变都会调用该函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">    if(this.props.user.id !== prevProps.user.id)&#123; // 这里setState 必须放在 条件判断中, 否则会发生死循环</span><br><span class="line">        console.log(&apos;又一个&apos;);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            count: this.state.count++</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UNSAFE_componentWillReceiveProps(nextProps) props 发生改变调用函数 将来会被弃用, 尽量避免出现, 可以使用上述 钩子函数替代<br><figure class="highlight plain"><figcaption><span>更新</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    if(nextProps.user.id !== this.props.user.id)&#123; // 理由同上</span><br><span class="line">        console.log(&apos;又一个&apos;);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            count: this.state.count++</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="unmount"></span></p><h2 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h2><p>componentWillUnmount() 组件将要卸载 卸载定时器、清理redux数据等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount() &#123;</span><br><span class="line">    clearTimeout(this.timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 生命周期&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://github.com/kenghuo/tags/JavaScript/"/>
    
      <category term="React" scheme="https://github.com/kenghuo/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 遇到的坑</title>
    <link href="https://github.com/kenghuo/2018/07/20/react-problem/"/>
    <id>https://github.com/kenghuo/2018/07/20/react-problem/</id>
    <published>2018-07-20T03:42:45.000Z</published>
    <updated>2018-08-02T10:25:04.707Z</updated>
    
    <content type="html"><![CDATA[<p>曾经在React中踩过的大大小小的坑</p><a id="more"></a><p>曾经踩过的坑</p><h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState)&#123;</span><br><span class="line"></span><br><span class="line">    // 传递的id 发生改变时 修改当前组件状态</span><br><span class="line">    prevProps.id !== this.props.id &amp;&amp; this.setState(&#123;</span><br><span class="line">        ... // 这里的状态修改必须要条件限制, 否则会陷入死循环</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state 的修改会触发这个钩子函数, 在这里设置 state , 修改状态会导致函数无限调用, 进入死循环</p><p>类似的还有 <code>UNSAFE_componentWillReceiveProps</code> 这个函数中不能修改 props , 触发 events up 事件, 需要进行条件限制  </p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">        title: &apos;测&amp;nbsp;&amp;nbsp;试&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123;this.state.title&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>显示结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测&amp;nbsp;&amp;nbsp;试</span><br></pre></td></tr></table></figure><p>这里字符串使用转义字符<br>需要用到dangerouslySetInnerHTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">        title: &apos;测&amp;nbsp;&amp;nbsp;试&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p dangerouslySetInnerHTML=&#123;&#123;_html:this.state.title&#125;&#125; &gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这样才会正常显示title内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测  试</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经在React中踩过的大大小小的坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://github.com/kenghuo/tags/JavaScript/"/>
    
      <category term="React" scheme="https://github.com/kenghuo/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="https://github.com/kenghuo/2018/07/20/blog/"/>
    <id>https://github.com/kenghuo/2018/07/20/blog/</id>
    <published>2018-07-20T03:27:50.000Z</published>
    <updated>2018-08-02T10:25:20.360Z</updated>
    
    <content type="html"><![CDATA[<p>搭建个人博客的方法</p><a id="more"></a><h3 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h3><p><a href="https://github.com/">注册地址</a></p><h3 id="创建个人仓库"><a href="#创建个人仓库" class="headerlink" title="创建个人仓库"></a>创建个人仓库</h3><p>登录账户之后 &gt; new repository(注意再次之前需要登录邮箱验证账户) &gt; 进入 Settings 找到 GitHub Pages &gt; choose a theme &gt;</p><p>之后再次进入 Settings 在 GitHub Pages 位置多出来 <strong>Your site is published at <a href="https://kenghuo.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/</a></strong> 表示博客创建成功 点击链接可以进入当前博客</p><p>如果想要使用类似 <strong><a href="https://kenghuo.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/</a></strong> 这样的域名作为博客地址, 需要仓库名称与账号名称一致</p><p>否则的话你的博客地址会变成这样 <strong><a href="https://kenghuo.github.io/akang.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/akang.github.io/</a></strong></p><h3 id="克隆代码到本地"><a href="#克隆代码到本地" class="headerlink" title="克隆代码到本地"></a>克隆代码到本地</h3><p>进入已经创建好的个人仓库</p><p>有个绿色的按钮 clone and download</p><p>可以使用git 或者直接下载压缩包 Download ZIP</p><ul><li><p><strong>git clone <a href="https://github.com/kenghuo/kenghuo.github.io.git">https://github.com/kenghuo/kenghuo.github.io.git</a> dirname</strong></p><p>或者 <strong>git clone <a href="mailto:git@github.com">git@github.com</a>:kenghuo/kenghuo.github.io.git dirname</strong> 都可以</p><p>dirname 为下载完成的文件夹名称 可以自定义</p></li><li><p>点击 Download ZIP 下载压缩包 解压缩也可以得到完整的项目</p></li></ul><h3 id="编译博客页面"><a href="#编译博客页面" class="headerlink" title="编译博客页面"></a>编译博客页面</h3><p>也可以通过HTML可以自定义页面 入口文件名称为 <strong>index.html</strong></p><p>也可以通过 hexo 搭建页面<br><a href="/2018/07/26/hexo-init/">hexo Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建个人博客的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://github.com/kenghuo/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>markdown 基本语法</title>
    <link href="https://github.com/kenghuo/2018/07/20/markdown/"/>
    <id>https://github.com/kenghuo/2018/07/20/markdown/</id>
    <published>2018-07-20T03:04:52.000Z</published>
    <updated>2018-07-20T10:41:55.341Z</updated>
    
    <content type="html"><![CDATA[<p>markdown 语法</p><a id="more"></a><p>Markdown 是一种轻量级标记语言，这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）”</p><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。</p><p><a href="https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md">英文参考文献</a>(<a href="https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md">https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md</a>)<br><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">英文参考文献</a>(<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">https://daringfireball.net/projects/markdown/syntax</a>)</p><p><a href="http://www.markdown.cn/" target="_blank" rel="noopener">中文参考文献</a>(<a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a>)<br><a href="https://github.com/younghz/Markdown">中文参考文献</a>(<a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a>)</p><p>Markdown 完全支持 HTML 语法<br>Markdown 完全支持 HTML 语法<br>Markdown 完全支持 HTML 语法</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>同 html h1 ~ h6</p><p>文字前加 <strong>#</strong> 个数表示标题大小, 越少越大(注意一级标题下存在下划线)<br>此外, 一行文本之后添加 = 或者 - 也可以作为一级或者二级标题出现</p><p>符号数量任意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字加上 <strong>.</strong>(英文句号) 加个空格 即可构成有序列表<br>数字可以随意写, markdown语法会自动调整为顺序编码</p><ol><li>水果<ol><li>苹果</li><li>香蕉</li></ol></li><li>蔬菜</li><li>小麦</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><strong>*</strong>  <strong>-</strong>  <strong>+</strong>  <strong>.</strong> 加个空格 即可构成无序列表<br>同级列表项前的符号保持一致<br>下级子列表 仅需要缩进一格</p><ul><li>测试1<ul><li>测试1.1<ul><li>测试1.1.1</li></ul></li><li>测试1.2</li><li>测试1.3</li></ul></li><li>测试2</li><li>测试3</li></ul><h2 id="插入url"><a href="#插入url" class="headerlink" title="插入url"></a>插入url</h2><p><strong>[ ]</strong> <strong>( )</strong> 两个符号构成 <strong>[ ]</strong> 描述性文字 <strong>( )</strong> 链接地址<br><strong>[ ]</strong> 放的是 a 标签里的文字信息 <strong>( )</strong> 路径地址<br>同 html的 a 标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.baidu.com/&quot; title=&quot;类似 html 的title&quot; &gt;百度&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">[百度](https://www.baidu.com/) 行内式</span><br><span class="line"></span><br><span class="line">[百度][baidu]</span><br><span class="line"></span><br><span class="line">[baidu]:https://www.baidu.com/ &quot;类似 html 的title&quot; 参考式 可以放在任意位置 比如文本末尾处</span><br></pre></td></tr></table></figure><p>效果</p><p><a href="https://www.baidu.com/" title="类似 html 的title" target="_blank" rel="noopener">百度</a> </p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.baidu.com/" title="类似 html 的title" target="_blank" rel="noopener">百度</a></p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><strong>!</strong> <strong>[ ]</strong> <strong>( )</strong> 这三个部分构成图片样式 !是加载图片的标志性符号<br><strong>[ ]</strong> 注释性文字  <strong>( )</strong> 图片路径 可以使用相对路径 也可以使用绝对路径</p><p>同 html 的 img 标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/img/&quot; alt=&quot;百度&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![百度](/img/cat.png)</span><br><span class="line"></span><br><span class="line">![不存在的图片](#)</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="百度"></p><p><img src="/img/cat.png" alt="喵"></p><p><img src="#" alt="不存在的图片"></p><h2 id="粗体、斜体、删除线"><a href="#粗体、斜体、删除线" class="headerlink" title="粗体、斜体、删除线"></a>粗体、斜体、删除线</h2><p>粗体：在文字前后添加 *<em> 或者 __ (注意符号与文字间不要有空格, 开始标记和结尾标记一致)<br>斜体：在文字前后添加 </em> 或者 _<br>删除线：在文字前后添加 ~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">测试 正常文字样式</span><br><span class="line"></span><br><span class="line">测试 __粗体文字样式__</span><br><span class="line"></span><br><span class="line">测试 _斜体文字样式_</span><br><span class="line"></span><br><span class="line">测试 ~~删除线文字样式~~</span><br></pre></td></tr></table></figure><p>测试 正常文字样式</p><p>测试 <strong>粗体文字样式</strong></p><p>测试 <em>斜体文字样式</em></p><p>测试 <del>删除线文字样式</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在文字前面加上 <strong>&gt;</strong><br>引用支持嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; To do or not to do, this is a problem  -- Shakespeare</span><br><span class="line"></span><br><span class="line">&gt; 这里是一级引用  </span><br><span class="line">&gt; &gt; 可以在后边嵌套.</span><br><span class="line">&gt; &gt; &gt; 甚至可以是多个嵌套等级.</span><br></pre></td></tr></table></figure><blockquote><p>To do or not to do, this is a problem  – Shakespeare</p></blockquote><blockquote><p>这里是一级引用  </p><blockquote><p>可以在后边嵌套.</p><blockquote><p>甚至可以是多个嵌套等级.</p></blockquote></blockquote></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>两个 <strong>|</strong> 之间是一个单元格<br>表头与表格主体之间通过 - (任意数量英文减号) 分割<br>分割线单元格数量不少于行内单元格, 比如每行有三个单元格, 分割线大于等于三个<br>行与行之间不要有空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 地址 | 标题 |</span><br><span class="line">|-|-|-|</span><br><span class="line">| 阿康 | kenghuo.github.io | markdown |</span><br><span class="line">| 每行 | 单元格数量一样 | 不然就不是表格了 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th>地址</th><th>标题</th></tr></thead><tbody><tr><td>阿康</td><td>kenghuo.github.io</td><td>markdown</td></tr><tr><td>每行</td><td>单元格数量一样</td><td>不然就不是表格了</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前后添加  __```__ </span><br><span class="line"></span><br><span class="line">注意前边符号写完后需要换行</span><br><span class="line"></span><br><span class="line">因此可以不换行加上注释性内容, 而不会出现在代码块中</span><br></pre></td></tr></table></figure><p><img src="/img/area.png" alt="代码块"></p><p>效果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">    console.log(&quot;hello markdown!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>同一段落内换行, 可以在 需要换行的地方 两个空格 回车</p><p>段落换行, 需要文字之间出现空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">段落内部换行  (两个空格)</span><br><span class="line">换行</span><br><span class="line"></span><br><span class="line">段落1</span><br><span class="line"></span><br><span class="line">段落2</span><br></pre></td></tr></table></figure><p>效果</p><p>段落内部换行<br>换行</p><p>段落1</p><p>段落2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown 语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="MarkDown" scheme="https://github.com/kenghuo/tags/MarkDown/"/>
    
  </entry>
  
</feed>

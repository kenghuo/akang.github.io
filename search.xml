<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>dva</title>
      <link href="/2018/08/30/dva/"/>
      <url>/2018/08/30/dva/</url>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Dva </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack 入门</title>
      <link href="/2018/08/16/webpack/"/>
      <url>/2018/08/16/webpack/</url>
      <content type="html"><![CDATA[<p>webpack 入门读物</p><a id="more"></a><p>初次接触 webpack</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>初始化项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -yes</span><br></pre></td></tr></table></figure></p><p>生成 package.json 文件<br>注意：文件目录为 webpack 会无法安装 webpack 依赖，需要修改 package.json 文件中 name 字段</p><p>全局以及文件夹内部安装 webpack<br>webpack 4.X 以后构建工具单独 需要单独安装 webpack-cli<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack webpack-cli -g</span><br><span class="line">$ npm install webpack webpack-cli -save-dev</span><br></pre></td></tr></table></figure></p><p>注意：json 文件不支持注释，在使用时删除注释内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-demo&quot;, # 默认生成的是当前文件夹目录名称 为避免webpack安装冲突修改为 webpack-demo</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.1.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.16.5&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建需要打包的测试文件<br>结构如下  </p><ul><li>app<ul><li>main.js</li><li>module.js</li></ul></li></ul><p>module.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// moudle.js</span><br><span class="line">module.exports = function () &#123;</span><br><span class="line">    let div = document.createElement(&apos;div&apos;);</span><br><span class="line">    div.textContent = &quot;Hi there and greetings!&quot;;</span><br><span class="line">    return div;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>main.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Div from &apos;./module&apos;;</span><br><span class="line"></span><br><span class="line">document.getElementById(&apos;app&apos;).appendChild(Div());</span><br></pre></td></tr></table></figure></p><p>创建 webpack 配置文件</p><p>webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: __dirname + &apos;/app/main.js&apos;, 入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &apos;/dist&apos;, //打包后的文件存放的目录</span><br><span class="line">        filename: &apos;bundle.js&apos; //打包后输出文件的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config webpack.config.js --mode development</span><br></pre></td></tr></table></figure></p><p>可以看到 dist 目录下生成 bundle.js</p><p>为了避免每次打包需要使用上述大串命令<br>可以在 package.json 中设置命令<br><code>scripts</code> 字段添加字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack --config webpack.config.js --mode development&quot;</span><br></pre></td></tr></table></figure></p><p>这里设置完成的 package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-demo&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;css-loader&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^0.22.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.1.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.16.5&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;webpack --config webpack.config.js --mode development&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></p><p>执行打包过程</p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><p>可以在 webpack 命令中添加 <code>--watch</code> 字段实现打包文件监听效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack --config webpack.config.js --mode development --watch&quot;</span><br></pre></td></tr></table></figure><p>打包文件修改实时刷新</p><h3 id="打包html"><a href="#打包html" class="headerlink" title="打包html"></a>打包html</h3><p>插件</p><p>app 文件夹下新建 html 提供 title、meta 等信息，插件会按照这个文件作为模板生成新的 html 文件到指定文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install html-webpack-plugin --save</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123; // html引用自动插入</span><br><span class="line">        filename: &apos;index.html&apos;,</span><br><span class="line">        template: &apos;app/index.html&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置后的 webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: __dirname + &apos;/app/main.js&apos;, //入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &apos;/dist&apos;, //打包后的文件存放的目录</span><br><span class="line">        filename: &apos;bundle.js&apos; // 打包后输出文件的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: []</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123; </span><br><span class="line">            filename: &apos;index.html&apos;,</span><br><span class="line">            template: &apos;app/index.html&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dist 下生成的 html 文件中自动调整引用的 js 文件名称</p><h3 id="打包css"><a href="#打包css" class="headerlink" title="打包css"></a>打包css</h3><p>app 文件夹下新建文件 main.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#app &#123;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    background: #333;</span><br><span class="line">    color: #ddd;</span><br><span class="line">    padding: .5rem 1rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.js 文件内引入 main.css 样式表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./main.css&apos;;</span><br></pre></td></tr></table></figure></p><p>打包会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./app/main.css 1:0</span><br><span class="line">Module parse failed: Unexpected character &apos;#&apos; (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file type.</span><br></pre></td></tr></table></figure></p><p>可以通过 style-loader 和 css-loader 实现 css 文件的打包<br>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install style-loader css-loader --save</span><br></pre></td></tr></table></figure></p><p>webpack.config.js 文件设置 css 打包规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.css$/, // 正则匹配所有css文件</span><br><span class="line">        loader: [&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>再次执行打包命令</p><p>可以看打包文件中引入了 css 样式表</p><h4 id="css文件单独打包"><a href="#css文件单独打包" class="headerlink" title="css文件单独打包"></a>css文件单独打包</h4><p>如果想将 css 文件单独打包出来可以使用插件 <code>mini-css-extract-plugin</code><br>注意：webpack 4 只能使用这个了，之前的插件 <code>extract-text-webpack-plugin</code>不好使了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                    options: &#123;&#125;</span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    loader: &apos;css-loader&apos;,</span><br><span class="line">                    options: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;      // css单独分离</span><br><span class="line">        filename: &quot;[name].css&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>配置完成的 webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: __dirname + &apos;/app/main.js&apos;, //入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &apos;/dist&apos;, //打包后的文件存放的目录</span><br><span class="line">        filename: &apos;bundle.js&apos; //打包后输出文件的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;,&#123;</span><br><span class="line">                        loader: &apos;css-loader&apos;,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123; // html引用自动插入</span><br><span class="line">            filename: &apos;index.html&apos;,</span><br><span class="line">            template: &apos;app/index.html&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;      // css单独分离</span><br><span class="line">            filename: &quot;[name].css&quot;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行打包命令 <code>npm run start</code></p><p>可以看到在 dist 文件夹下生成的 main.css</p><h4 id="压缩-css-代码"><a href="#压缩-css-代码" class="headerlink" title="压缩 css 代码"></a>压缩 css 代码</h4><!-- 还在写待续 --><p>插件 optimize-css-assets-webpack-plugin 用来压缩 css 代码<br><a href="https://www.npmjs.com/package/optimize-css-assets-webpack-plugin" target="_blank" rel="noopener">文档</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">    cssProcessorOptions: &#123; </span><br><span class="line">        mergeLonghand: false,</span><br><span class="line">        discardComments: &#123;</span><br><span class="line">            removeAll: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    canPrint: true,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><h4 id="sass-编译"><a href="#sass-编译" class="headerlink" title="sass 编译"></a>sass 编译</h4><p>安装 <code>sass-loader</code> 和 <code>node-sass</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.scss$/,</span><br><span class="line">    use: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: &apos;style-loader&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader // css 代码单独分离</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: &apos;css-loader&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: &apos;sass-loader&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要代码的话可以看这里的 <a href="https://github.com/kenghuo/demo.github.io/tree/master/webpack">demo</a></p>]]></content>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>占位图片</title>
      <link href="/2018/08/15/img/"/>
      <url>/2018/08/15/img/</url>
      <content type="html"><![CDATA[<p>占位图片</p><a id="more"></a><p><a href="https://placeholdit.imgix.net/~text?txtsize=30&amp;txt=1920x680&amp;w=1920&amp;h=680" target="_blank" rel="noopener">https://placeholdit.imgix.net/~text?txtsize=30&amp;txt=1920x680&amp;w=1920&amp;h=680</a></p><p>txtsize: 字体大小<br>txt: 文字内容<br>w: 宽<br>h: 高</p><p>这个网址可以生产站位图片调整大小图片文字等</p>]]></content>
      
      
        <tags>
            
            <tag> img </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gulp 入门</title>
      <link href="/2018/08/09/gulp/"/>
      <url>/2018/08/09/gulp/</url>
      <content type="html"><![CDATA[<p>gulp 入门</p><a id="more"></a><p>gulp 是一种自动化构建工具</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp --save</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>gulp 主要通过 <code>task</code> 来实现任务流程, 可以使用 pipe 传递每个步骤处理完成后的结果</p><p>在根目录新建文件夹 css<br>css 文件夹下新建文件 test.css<br><code>这里的根目录是指 gulpfile.js 所在目录</code></p><figure class="highlight css"><figcaption><span>测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录创建 gulpfile.js 文件, gulp 执行的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, function () &#123;</span><br><span class="line">    gulp.src(&apos;css/test.css&apos;)        </span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>多个任务流, 可以限制执行顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;css&apos;])</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;css&apos;,function()&#123;</span><br><span class="line">    gulp.src(&apos;css/test.css&apos;)</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>task 方法可以通过添加参数实现顺序控制</p><p><code>default</code> 执行之前先执行任务 <code>css</code></p><p>将 css 目录下的 test.css 文件重新生成到 dist 目录下</p><p>这里 gulp.src 需要处理的文件<br>gulp.dest 输出处理完成的文件</p><p>在根目录打开 cmd 或者 git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure></p><p>gulp 会执行默认任务流 default</p><p>可以添加参数确保 gulp 执行指定的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp sass_css</span><br></pre></td></tr></table></figure><p>执行指定的任务 <code>sass_css</code></p><p><code>注意： gulp 命令如果报错 No such file or directory</code><br><code>需要全局安装 gulp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure></p><p>执行完成后会在根目录多出文件夹 dist 生成新的 test.css 文件</p><p>了解基本用法后, 提供几个常见插件的使用</p><p><code>注意：</code> 我这里只是提到常用的几个插件</p><p>更多更详细的 <a href="https://zhuanlan.zhihu.com/p/20734615" target="_blank" rel="noopener">看这里</a></p><h3 id="css-插件"><a href="#css-插件" class="headerlink" title="css 插件"></a>css 插件</h3><p>几个常见的 css 相关插件</p><h4 id="sass-编译为-css"><a href="#sass-编译为-css" class="headerlink" title="sass 编译为 css"></a>sass 编译为 css</h4><p>要实现 sass 的编译使用相关的插件  </p><p>sass 编译插件 </p><p>插件名称: <code>gulp-sass</code> </p><p>首先需要 安装 <code>gulp-sass</code> 插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-sass --save</span><br></pre></td></tr></table></figure></p><p>在 css 文件夹下新建文件</p><p><code>main.scss</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$width: 100px;</span><br><span class="line">.container&#123;</span><br><span class="line">    width: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译 gulpfile.js 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var sass = require(&apos;gulp-sass&apos;);</span><br><span class="line"></span><br><span class="line">// 新建一个任务流 任务流名称可以随意命名</span><br><span class="line">gulp.task(&apos;sass_css&apos;, function () &#123;</span><br><span class="line">    gulp.src(&apos;css/main.scss&apos;)               // scss 路径</span><br><span class="line">        .pipe(sass())                       // 编译 scss</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))   // 输出到 dist 文件夹下</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>根目录打开 cmd 或者 git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp sass_css</span><br></pre></td></tr></table></figure></p><p>执行 gulp 的任务 sass_css<br>会在根目录下生产 dist 文件夹, 以及编译好的 main.css</p><h4 id="css-文件压缩"><a href="#css-文件压缩" class="headerlink" title="css 文件压缩"></a>css 文件压缩</h4><p>css 压缩插件 </p><p>插件名称: <code>gulp-minify-css</code></p><p>安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-minify-css --save</span><br></pre></td></tr></table></figure></p><p>修改 gulpfile.js 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var minifyCss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">// 编译 sass_css</span><br><span class="line">gulp.task(&apos;sass_css_min&apos;, function () &#123;</span><br><span class="line">    gulp.src(&apos;css/main.scss&apos;)               // scss 路径</span><br><span class="line">        .pipe(sass())                       // 编译 scss</span><br><span class="line">        .pipe(minifyCss())                  // 压缩 css 文件</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))            // 输出到 dist 文件夹下</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>根目录打开 cmd 或者 git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp sass_css_min</span><br></pre></td></tr></table></figure></p><p>这里的压缩会删除不必须的空格以及换行</p><p>打开dist内的 main.css 生成的文件内容是一行 css 样式</p><h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><p>文件合并</p><p>插件名称: <code>gulp-concat</code></p><p>安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-concat --save</span><br></pre></td></tr></table></figure></p><p>在 css 目录下再新建文件 <code>demo.scss</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: #2ac3ff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改  gulpfile.js 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 编译 sass_css_min</span><br><span class="line">gulp.task(&apos;sass_css_concat_min&apos;, function () &#123;</span><br><span class="line">    gulp.src(&apos;css/*.scss&apos;)                  // scss 路径 *.scss 适配所有以 scss 结尾的文件</span><br><span class="line">        .pipe(sass())                       // 编译 scss</span><br><span class="line">        .pipe(concat(&apos;dist/main.css&apos;))      // concat 需要给合并文件的路劲以及名称</span><br><span class="line">        .pipe(minifyCss())                  // 压缩 css 文件</span><br><span class="line">        .pipe(gulp.dest(&apos;&apos;))                // 输出文件 这里的路劲不需要写 流将 dist/main.css 合并后的文件进行压缩然后输出</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>根目录打开 cmd 或者 git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp sass_css_concat_min</span><br></pre></td></tr></table></figure></p><p>根目录下生成 dist/main.css 会将 main.scss 和 demo.scss 文件内容合并压缩</p><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p>文件重命名</p><p>插件名称: <code>gulp-rename</code></p><p>压缩文件重新命名 添加后缀 .min</p><p>安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-rename --save</span><br></pre></td></tr></table></figure></p><p>修改 gulpfile.js 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var rename = require(&apos;gulp-rename&apos;);</span><br><span class="line">// 编译 sass_css_concat_min </span><br><span class="line">gulp.task(&apos;sass_css_concat_min_rename&apos;, function () &#123;</span><br><span class="line">    gulp.src(&apos;css/*.scss&apos;)                  // scss 路径 *.scss 适配所有以 scss 结尾的文件</span><br><span class="line">        .pipe(sass())                       // 编译 scss</span><br><span class="line">        .pipe(concat(&apos;dist/main.css&apos;))      // concat 需要给合并文件的路劲以及名称</span><br><span class="line">        .pipe(minifyCss())                  // 压缩 css 文件</span><br><span class="line">        .pipe(rename(&#123;suffix: &apos;.min&apos;&#125;))     // 修改压缩文件名称 添加后缀 .min</span><br><span class="line">        .pipe(gulp.dest(&apos;&apos;))                // 输出文件 这里的路劲不需要写 流将 dist/main.css 合并后的文件进行压缩然后输出</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>根目录打开 cmd 或者 git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp sass_css_concat_min_rename</span><br></pre></td></tr></table></figure></p><p>根目录下生成 dist/main.min.css 会将 main.scss 和 demo.scss 文件内容合并压缩</p><p>rename 也可以将文件命名为任意名称<br><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="noopener">文档</a></p><h3 id="js-插件"><a href="#js-插件" class="headerlink" title="js 插件"></a>js 插件</h3><h4 id="压缩插件"><a href="#压缩插件" class="headerlink" title="压缩插件"></a>压缩插件</h4><p>压缩 js 文件</p><p>插件名称: <code>gulp-uglify</code></p><p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;js_min_ugly&apos;,function () &#123;</span><br><span class="line">    gulp.src(&apos;js/*/*.js&apos;)                   // 读取文件</span><br><span class="line">        .pipe(uglify())                     // 压缩</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))            // 输出</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>注意：</code> 文件压缩插件不支持 es6 需要使用 babel 编译</p><p>所以如果使用 es6 语法, 首先需要使用 babel 进行编译</p><h4 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h4><p>编译 js 文件为可以被浏览器直接运行的文件</p><p>插件名称: <code>gulp-babel</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;js_min_ugly&apos;,function () &#123;</span><br><span class="line">    gulp.src(&apos;js/*/*.js&apos;)                   // 读取文件</span><br><span class="line">        .pipe(babel(&#123;presets: [&apos;es2015&apos;]&#125;)) // 编译</span><br><span class="line">        .pipe(uglify())                     // 压缩 压缩不支持 es6 语法,需要使用 babel 编译</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))            // 输出</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在线图片转 ico</title>
      <link href="/2018/08/07/icon/"/>
      <url>/2018/08/07/icon/</url>
      <content type="html"><![CDATA[<p>在线图片转换 ico</p><p><a href="https://lvwenhan.com/convertico/" target="_blank" rel="noopener">地址</a>(<a href="https://lvwenhan.com/convertico/" target="_blank" rel="noopener">https://lvwenhan.com/convertico/</a>)<br><a id="more"></a></p><p>在线转换器</p><!-- 说实话不是很好用 --><p>需要背景透明的小伙伴可以尝试下 <code>IconWorkshop</code> 这个软件<br>尴尬的是只有30天试用期</p><p><a href="http://www.iconworkshop.cn/" target="_blank" rel="noopener">下载地址</a></p>]]></content>
      
      
        <tags>
            
            <tag> ico </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github 绑定独立域名</title>
      <link href="/2018/08/07/domain/"/>
      <url>/2018/08/07/domain/</url>
      <content type="html"><![CDATA[<p>github 绑定独立域名</p><a id="more"></a><h3 id="购买域名-添加解析"><a href="#购买域名-添加解析" class="headerlink" title="购买域名, 添加解析"></a>购买域名, 添加解析</h3><p>我的域名从阿里云购买的，以阿里云为例说明流程</p><ul><li><p>在阿里云域名服务购买自己喜欢的域名<br><a href="https://wanwang.aliyun.com/?spm=5176.8142029.selected.2.28b06d3eSO110Y" target="_blank" rel="noopener">链接</a></p></li><li><p>在阿里云控制台云解析 DNS<br>  <code>添加记录</code> 解析自己的博客地址<br>  <img src="/img/DNS.png" alt="解析DNS"><br>  三个位置依次选中 <code>CNAME</code>  <code>www</code>  <code>博客地址</code><br>  重复操作添加 <code>CNAME</code> <code>@</code> <code>博客地址</code></p></li></ul><p>使用 github 博客页面可以参考 <a href="/2018/07/20/blog">链接</a></p><p>非阿里云购买的域名解析  </p><ul><li><p>控制台域名管理<br>  添加自己购买的域名</p></li><li><p>在自己购买域名的平台修改 DNS </p><p>  <code>dns12.hichina.com</code>   </p><p>  <code>dns11.hichina.com</code></p></li><li><p>控制台云解析 DNS<br>  步骤同上</p></li></ul><h3 id="添加-github-重定向"><a href="#添加-github-重定向" class="headerlink" title="添加 github 重定向"></a>添加 github 重定向</h3><p>在博客根目录下添加文件 <code>CNAME</code>，文件内写入域名<br>注意：</p><ul><li>文件没有后缀名  </li><li>写入内容仅域名地址  例如：<code>kenghuo.ink</code></li></ul><p>或者在 github 仓库 setting 中 Github Page 添加设置 Custom domain 添加域名</p>]]></content>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web Worker</title>
      <link href="/2018/08/03/worker/"/>
      <url>/2018/08/03/worker/</url>
      <content type="html"><![CDATA[<p>web worker 的使用</p><a id="more"></a><p>JS 为单线程, 一些计算量较大的代码肯定会影响整体程序的执行速度,<br>而且, 多核计算机的性能也无法高效利用,<br>为了解决这些问题, HTML5 提出 Web Worker , 可以使 JS 一些可以同时进行的事件放在独立的小线程中执行</p><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><p>在 worker 子线程中，可以获得下列对象</p><ol><li><p>navigator对象</p></li><li><p>location对象，只读<br> 这里不能进行 location 赋值实现页面跳转！！！</p></li><li><p>XMLHttpRequest对象<br> ajax 请求</p></li><li><p>setTimeout/setInterval方法</p></li><li><p>Application Cache</p></li><li><p>通过importScripts()方法加载其他脚本</p></li><li><p>创建新的Web Worker</p></li></ol><p>worker线程不能获得下列对象</p><ol><li><p>DOM对象</p></li><li><p>window对象</p></li><li><p>document对象</p></li><li><p>parent对象</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>主线程使用 new 新建一个子线程, 参数为线程文件<br><figure class="highlight plain"><figcaption><span>Worker</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var worker = new Worker(&apos;work.js&apos;);</span><br></pre></td></tr></table></figure></p><p>调用 <code>postMessage</code> 方法向子线程传递消息<br>通过 <code>onmessage</code> 监听子线程发送的消息 <code>onerror</code> 监听错误信息  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">worker.postMessage(&#123;name:&apos;Kenghuo&apos;, title: &apos;Hello&apos;&#125;);</span><br><span class="line"></span><br><span class="line">worker.onmessage = function(event)&#123;</span><br><span class="line">    console.log(event);</span><br><span class="line"></span><br><span class="line">    document.getElementById(&apos;title&apos;).innerHTML = event.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.onerror = function(error)&#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子线程</p><p>新建的 work.js 文件</p><p>通过 <code>onmessage</code> 来接收主线程发送的消息<br>通过 <code>postMessage</code> 发送处理完成后的信息<br>通过 <code>importScript</code> 引入别的 JS 文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">importScript(&apos;func.js&apos;);</span><br><span class="line"></span><br><span class="line">onmessage = (event) =&gt; &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">    </span><br><span class="line">    postMessage(add(event.data.title + &apos; &apos; + event.data.name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kenghuo/demo/tree/master/worker">demo</a></p>]]></content>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> worker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一键分享</title>
      <link href="/2018/08/02/share/"/>
      <url>/2018/08/02/share/</url>
      <content type="html"><![CDATA[<p>一键分享</p><a id="more"></a><p>一键分享的代码</p><p>复制这段代码到希望分享的网页, 即可实现一键分享功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">window._bd_share_config = &#123;</span><br><span class="line">    &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: [&quot;tsina&quot;, &quot;weixin&quot;, &quot;mail&quot;, &quot;linkedin&quot;, &quot;copy&quot;, &quot;print&quot;],</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;bdSize&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;slide&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;slide&quot;,</span><br><span class="line">        &quot;bdImg&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;bdPos&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;bdTop&quot;: &quot;100&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">with(document) 0[</span><br><span class="line">    (getElementsByTagName(&apos;head&apos;)[0] || body)  </span><br><span class="line">        .appendChild(createElement(&apos;script&apos;))  </span><br><span class="line">        .src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 这里不支持 with 关键字的代码</span><br><span class="line">/* document.getElementsByTagName(&apos;head&apos;)[0].appendChild(document.createElement(&apos;script&apos;)).src = </span><br><span class="line">    &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5) */</span><br></pre></td></tr></table></figure></p><p><code>注意：</code> JavaScript 严格模式不支持 <code>with</code> 关键字, 需要修改代码</p><p><a href="http://share.baidu.com/code" target="_blank" rel="noopener">官方百度分享</a></p>]]></content>
      
      
        <tags>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 和 github 创建博客最简单粗暴的方法</title>
      <link href="/2018/07/26/hexo-init/"/>
      <url>/2018/07/26/hexo-init/</url>
      <content type="html"><![CDATA[<p>在 github 上 使用 hexo 创建博客最简单粗暴的方法 </p><a id="more"></a><p>最简单粗暴创建博客的方法</p><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><ul><li>注册 github 账号<br><a href="https://www.github.com" target="_blank" rel="noopener">注册地址</a></li><li>新建个人仓库  </li><li>打开 github page<br>详情见<a href="/2018/07/20/blog/">搭建博客</a></li></ul><p>注册账号之后，需要添加SSH Key<br>使用 git 管理代码需要这东西</p><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><ol><li>安装 nodejs</li></ol><p><a href="https://nodejs.org/dist/v8.11.3/node-v8.11.3-x64.msi" target="_blank" rel="noopener">下载地址</a><br>没有特殊要求直接安装<br>一直下一步就行</p><ol start="2"><li>安装 hexo</li></ol><p>在安装 nodeJS 之后，可以使用 npm 包管理器 安装 hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo hexo-cli -g # 全局安装 hexo</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 git</li></ol><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a><br>根据需要安装对应版本的 git<br>安装成功之后，右键单击出现 Git Bash Here 以及 Git GUI 说明成功</p><h3 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h3><p>找个空文件夹直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>在 hexo init 完成后记得安装包 hexo-deployer-git<br><figure class="highlight plain"><figcaption><span>包</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>修改配置文件 _config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/github用户名 # 提交的账户名</span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/github用户名/github用户名.github.io # 提交的仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>配置完成后，依次键入以下命令<br><figure class="highlight plain"><figcaption><span>提交</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean # 清理原有的文件 public 文件夹</span><br><span class="line">$ hexo generate # 重新打包生成 public 文件夹</span><br><span class="line">$ hexo deploy # 提交文件到指定 github 仓库</span><br></pre></td></tr></table></figure></p><p>在本地预览当前博客效果<br><figure class="highlight plain"><figcaption><span>本地</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean # 清理原有的文件 public 文件夹</span><br><span class="line">$ hexo generate # 重新打包生成 public 文件夹</span><br><span class="line">$ hexo server # 开启本地服务器 4000 端口号</span><br></pre></td></tr></table></figure></p><p>浏览器 localhost:4000 可以看到当前博客生成内容</p>]]></content>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 常见麻烦</title>
      <link href="/2018/07/26/hexo/"/>
      <url>/2018/07/26/hexo/</url>
      <content type="html"><![CDATA[<p>hexo 使用过程中遇到的麻烦</p><a id="more"></a><h3 id="没反应"><a href="#没反应" class="headerlink" title="没反应"></a>没反应</h3><p>命令行键入 hexo d 毫无反应</p><p><img src="/img/deploy.png" alt="无反应"></p><ol><li>原因: 缺少包 hexo-deployer-git</li></ol><p>hexo 从版本 2.x.x 升级到 3.x.x 删除了内置的 git 包<br>需要单独安装 hexo-deployer-git 包</p><ol start="2"><li>原因: 配置文件 url 以及 deploy 未配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/username  # 这里是提交的账户</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io # 这里是提交仓库的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><h3 id="hexo-d-报错"><a href="#hexo-d-报错" class="headerlink" title="hexo d 报错"></a>hexo d 报错</h3><p>可能是 Git 抽风</p><p>可以删除根目录下的 <code>.deploy_git</code> 文件夹<br>重新执行 <code>hexo d</code></p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 常用命令</title>
      <link href="/2018/07/26/git/"/>
      <url>/2018/07/26/git/</url>
      <content type="html"><![CDATA[<p>git 常用命令</p><a id="more"></a><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>克隆或者叫下载, 将远程服务器上的仓库文件下载到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitee.com:xxx `&lt;dirName&gt;`  </span><br><span class="line">git clone https://gitee.com/xxx `&lt;dirName&gt;`</span><br></pre></td></tr></table></figure><p>将仓库 <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a>:xxx 中的文件下载到本地 <code>./dirName</code> 目录下<br>将仓库 <a href="https://gitee.com/xxx" target="_blank" rel="noopener">https://gitee.com/xxx</a> 中的文件下载到本地 <code>./dirName</code> 目录下</p><p>两个命令的区别在于 使用 SSH 下载的内容提交不需要登录名以及密码<br>注意：不论哪个 git 命令提交代码都需要 <code>SSH公匙</code> 验证</p><h2 id="SSH-Key"><a href="#SSH-Key" class="headerlink" title="SSH Key"></a>SSH Key</h2><p>查看公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh # 进入指定文件夹  </span><br><span class="line">$ ls # 查看文件夹下的文件</span><br></pre></td></tr></table></figure><p>存在这两个文件文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>文件 id_rsa.pub 储存当前生成的随机数公钥</p><p>否则生成公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">连续3个回车</span><br></pre></td></tr></table></figure></p><p>在 github 设置生成的公钥<br>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></p><p>出现文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure></p><p>设置公钥成功</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>将修改内容交于 git 控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add . # 提交全部修改的文件</span><br><span class="line">$ git add xxx # 提交指定文件</span><br></pre></td></tr></table></figure></p><p>将提交的修改添加到缓冲区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;xxx&apos; # xxx 提交的注释性内容</span><br></pre></td></tr></table></figure></p><p>上传提交的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;branchName&gt; # 提交指定分支的修改</span><br></pre></td></tr></table></figure></p><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><ul><li><p>添加分支 git branch <code>&lt;newBranchName&gt;</code> 添加新分支 newBranchName<br>新分支的改动不会影响原有分支的文件 注意切换分支之前对当前分支进行提交 (commit) 操作<br>推送之前注意对应分支, 除了默认分支不需要以外, 其余分支提交 git push <code>origin &lt;branchName&gt;</code></p></li><li><p>切换分支 git checkout <code>&lt;branchName&gt;</code> 切换到分支 branchName<br>多个分支之间的文件不受彼此影响</p></li><li><p>合并分支修改 git merge <code>&lt;branchName&gt;</code>  将当前分支与 branchName 分支合并</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序</title>
      <link href="/2018/07/24/sort/"/>
      <url>/2018/07/24/sort/</url>
      <content type="html"><![CDATA[<p>几种排序算法</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序<br>一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    console.time(&apos;原始冒泡排序时间&apos;);</span><br><span class="line">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123; // 相邻元素两两对比</span><br><span class="line">                let temp = arr[j+1]; // 元素交换</span><br><span class="line">                arr[j+1] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;原始冒泡排序时间&apos;);</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化<br>标记已经完成的排序序号, 从未排序的位置开始进行排序, 减少内层循环次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort2(arr) &#123;</span><br><span class="line">    let i = arr.length-1; //初始时,最后位置保持不变</span><br><span class="line">    console.time(&apos;优化冒泡排序时间&apos;);</span><br><span class="line">    while ( i&gt; 0) &#123;</span><br><span class="line">        let pos= 0; // 每趟开始时,无记录交换</span><br><span class="line">        for (let j = 0; j&lt; i; j++)&#123;</span><br><span class="line">            if (arr[j]&gt; arr[j+1]) &#123;</span><br><span class="line">                pos= j; //记录交换的位置</span><br><span class="line">                let tmp = arr[j];</span><br><span class="line">                arr[j]=arr[j+1];</span><br><span class="line">                arr[j+1]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i = pos; // 为下一趟排序作准备</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;优化冒泡排序时间&apos;);</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>升级版冒泡排序<br>从前向后同时进行排序操作, 记录排序序号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort3(arr3) &#123;</span><br><span class="line">　　var low = 0;</span><br><span class="line">　　var high= arr.length-1; //设置变量的初始值</span><br><span class="line">　　var tmp,j;</span><br><span class="line">　　console.time(&apos;2.改进后冒泡排序耗时&apos;);</span><br><span class="line">　　while (low &lt; high) &#123;</span><br><span class="line">　　　　for (j= low; j&lt; high; ++j) &#123;         //正向冒泡,找到最大者</span><br><span class="line">　　　　　　if (arr[j]&gt; arr[j+1]) &#123;</span><br><span class="line">　　　　　　　　tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　--high;  //修改high值, 前移一位</span><br><span class="line">　　　　for (j=high; j&gt;low; --j) &#123;          //反向冒泡,找到最小者</span><br><span class="line">　　　　　　if (arr[j]&lt;arr[j-1]) &#123;</span><br><span class="line">　　　　　　　　tmp = arr[j]; arr[j]=arr[j-1];arr[j-1]=tmp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;　</span><br><span class="line">　　　　++low;  //修改low值,后移一位</span><br><span class="line">　　&#125;</span><br><span class="line">　　console.timeEnd(&apos;2.改进后冒泡排序耗时&apos;);</span><br><span class="line">　　return arr3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序<br>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，<br>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>以此类推，直到所有元素均排序完毕。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    var minIndex, temp;</span><br><span class="line">    console.time(&apos;选择排序耗时&apos;); // 计时开始</span><br><span class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        for (var j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123; //寻找最小的数</span><br><span class="line">                minIndex = j; //将最小数的索引保存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;选择排序耗时&apos;); // 计时结束</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序<br>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到 {\displaystyle O(1)} {\displaystyle O(1)}的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort(array) &#123;</span><br><span class="line">    console.time(&apos;插入排序耗时：&apos;);</span><br><span class="line">    for (var i = 1; i &lt; array.length; i++) &#123;</span><br><span class="line">        var key = array[i];</span><br><span class="line">        var j = i - 1;</span><br><span class="line">        while ( array[j] &gt; key) &#123;</span><br><span class="line">            array[j + 1] = array[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j + 1] = key;</span><br><span class="line">    &#125;</span><br><span class="line">    console.timeEnd(&apos;插入排序耗时：&apos;);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2018/07/20/blog/"/>
      <url>/2018/07/20/blog/</url>
      <content type="html"><![CDATA[<p>搭建个人博客的方法</p><a id="more"></a><h3 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h3><p><a href="https://github.com/">注册地址</a></p><h3 id="创建个人仓库"><a href="#创建个人仓库" class="headerlink" title="创建个人仓库"></a>创建个人仓库</h3><p>登录账户之后 &gt; new repository(注意再次之前需要登录邮箱验证账户) &gt; 进入 Settings 找到 GitHub Pages &gt; choose a theme &gt;</p><p>之后再次进入 Settings 在 GitHub Pages 位置多出来 <strong>Your site is published at <a href="https://kenghuo.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/</a></strong> 表示博客创建成功 点击链接可以进入当前博客</p><p>如果想要使用类似 <strong><a href="https://kenghuo.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/</a></strong> 这样的域名作为博客地址, 需要仓库名称与账号名称一致</p><p>否则的话你的博客地址会变成这样 <strong><a href="https://kenghuo.github.io/akang.github.io/" target="_blank" rel="noopener">https://kenghuo.github.io/akang.github.io/</a></strong></p><h3 id="克隆代码到本地"><a href="#克隆代码到本地" class="headerlink" title="克隆代码到本地"></a>克隆代码到本地</h3><p>进入已经创建好的个人仓库</p><p>有个绿色的按钮 clone and download</p><p>可以使用git 或者直接下载压缩包 Download ZIP</p><ul><li><p><strong>git clone <a href="https://github.com/kenghuo/kenghuo.github.io.git">https://github.com/kenghuo/kenghuo.github.io.git</a> dirname</strong></p><p>或者 <strong>git clone <a href="mailto:git@github.com">git@github.com</a>:kenghuo/kenghuo.github.io.git dirname</strong> 都可以</p><p>dirname 为下载完成的文件夹名称 可以自定义</p></li><li><p>点击 Download ZIP 下载压缩包 解压缩也可以得到完整的项目</p></li></ul><h3 id="编译博客页面"><a href="#编译博客页面" class="headerlink" title="编译博客页面"></a>编译博客页面</h3><p>也可以通过HTML可以自定义页面 入口文件名称为 <strong>index.html</strong></p><p>也可以通过 hexo 搭建页面<br><a href="/2018/07/26/hexo-init/">hexo Github</a></p>]]></content>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown 基本语法</title>
      <link href="/2018/07/20/markdown/"/>
      <url>/2018/07/20/markdown/</url>
      <content type="html"><![CDATA[<p>markdown 语法</p><a id="more"></a><p>Markdown 是一种轻量级标记语言，这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）”</p><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。</p><p><a href="https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md">英文参考文献</a>(<a href="https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md">https://github.com/DavidAnson/markdownlint/blob/v0.10.0/doc/Rules.md</a>)<br><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">英文参考文献</a>(<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">https://daringfireball.net/projects/markdown/syntax</a>)</p><p><a href="http://www.markdown.cn/" target="_blank" rel="noopener">中文参考文献</a>(<a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a>)<br><a href="https://github.com/younghz/Markdown">中文参考文献</a>(<a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a>)</p><p>Markdown 完全支持 HTML 语法<br>Markdown 完全支持 HTML 语法<br>Markdown 完全支持 HTML 语法</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>同 html h1 ~ h6</p><p>文字前加 <strong>#</strong> 个数表示标题大小, 越少越大(注意一级标题下存在下划线)<br>此外, 一行文本之后添加 = 或者 - 也可以作为一级或者二级标题出现</p><p>符号数量任意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字加上 <strong>.</strong>(英文句号) 加个空格 即可构成有序列表<br>数字可以随意写, markdown语法会自动调整为顺序编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 水果</span><br><span class="line">    1. 苹果</span><br><span class="line">    1. 香蕉</span><br><span class="line">1. 蔬菜</span><br><span class="line">1. 小麦</span><br></pre></td></tr></table></figure><ol><li>水果<ol><li>苹果</li><li>香蕉</li></ol></li><li>蔬菜</li><li>小麦</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><strong>*</strong>  <strong>-</strong>  <strong>+</strong>  <strong>.</strong> 加个空格 即可构成无序列表<br>同级列表项前的符号保持一致<br>下级子列表 仅需要缩进一格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 测试1</span><br><span class="line">  + 测试1.1</span><br><span class="line">    * 测试1.1.1</span><br><span class="line">  + 测试1.2</span><br><span class="line">  + 测试1.3</span><br><span class="line">- 测试2</span><br><span class="line">- 测试3</span><br></pre></td></tr></table></figure></p><ul><li>测试1<ul><li>测试1.1<ul><li>测试1.1.1</li></ul></li><li>测试1.2</li><li>测试1.3</li></ul></li><li>测试2</li><li>测试3</li></ul><h2 id="插入url"><a href="#插入url" class="headerlink" title="插入url"></a>插入url</h2><p><strong>[ ]</strong> <strong>( )</strong> 两个符号构成 <strong>[ ]</strong> 描述性文字 <strong>( )</strong> 链接地址<br><strong>[ ]</strong> 放的是 a 标签里的文字信息 <strong>( )</strong> 路径地址<br>同 html的 a 标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.baidu.com/&quot; title=&quot;类似 html 的title&quot; &gt;百度&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">[百度](https://www.baidu.com/) 行内式</span><br><span class="line"></span><br><span class="line">[百度][baidu]</span><br><span class="line"></span><br><span class="line">[baidu]:https://www.baidu.com/ &quot;类似 html 的title&quot; 参考式 可以放在任意位置 比如文本末尾处</span><br></pre></td></tr></table></figure><p>效果</p><p><a href="https://www.baidu.com/" title="类似 html 的title" target="_blank" rel="noopener">百度</a> </p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.baidu.com/" title="类似 html 的title" target="_blank" rel="noopener">百度</a></p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><strong>!</strong> <strong>[ ]</strong> <strong>( )</strong> 这三个部分构成图片样式 !是加载图片的标志性符号<br><strong>[ ]</strong> 注释性文字  <strong>( )</strong> 图片路径 可以使用相对路径 也可以使用绝对路径</p><p>同 html 的 img 标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/img/&quot; alt=&quot;百度&quot; /&gt;</span><br><span class="line"></span><br><span class="line">![狗子](/img/avatar.png)</span><br><span class="line"></span><br><span class="line">![不存在的图片](#)</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="百度"></p><p><img src="/img/avatar.png" alt="狗子"></p><p><img src="#" alt="不存在的图片"></p><h2 id="粗体、斜体、删除线"><a href="#粗体、斜体、删除线" class="headerlink" title="粗体、斜体、删除线"></a>粗体、斜体、删除线</h2><p>粗体：在文字前后添加 *<em> 或者 __ (注意符号与文字间不要有空格, 开始标记和结尾标记一致)<br>斜体：在文字前后添加 </em> 或者 _<br>删除线：在文字前后添加 ~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">测试 正常文字样式</span><br><span class="line"></span><br><span class="line">测试 __粗体文字样式__</span><br><span class="line"></span><br><span class="line">测试 _斜体文字样式_</span><br><span class="line"></span><br><span class="line">测试 ~~删除线文字样式~~</span><br></pre></td></tr></table></figure><p>测试 正常文字样式</p><p>测试 <strong>粗体文字样式</strong></p><p>测试 <em>斜体文字样式</em></p><p>测试 <del>删除线文字样式</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在文字前面加上 <strong>&gt;</strong><br>引用支持嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; To do or not to do, this is a problem  -- Shakespeare</span><br><span class="line"></span><br><span class="line">&gt; 这里是一级引用  </span><br><span class="line">&gt; &gt; 可以在后边嵌套.</span><br><span class="line">&gt; &gt; &gt; 甚至可以是多个嵌套等级.</span><br></pre></td></tr></table></figure><blockquote><p>To do or not to do, this is a problem  – Shakespeare</p></blockquote><blockquote><p>这里是一级引用  </p><blockquote><p>可以在后边嵌套.</p><blockquote><p>甚至可以是多个嵌套等级.</p></blockquote></blockquote></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>两个 <strong>|</strong> 之间是一个单元格<br>表头与表格主体之间通过 - (任意数量英文减号) 分割<br>分割线单元格数量不少于行内单元格, 比如每行有三个单元格, 分割线大于等于三个<br>行与行之间不要有空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 地址 | 标题 |</span><br><span class="line">|-|-|-|</span><br><span class="line">| 阿康 | kenghuo.github.io | markdown |</span><br><span class="line">| 每行 | 单元格数量一样 | 不然就不是表格了 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th>地址</th><th>标题</th></tr></thead><tbody><tr><td>阿康</td><td>kenghuo.github.io</td><td>markdown</td></tr><tr><td>每行</td><td>单元格数量一样</td><td>不然就不是表格了</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前后添加  __```__ </span><br><span class="line"></span><br><span class="line">注意前边符号写完后需要换行</span><br><span class="line"></span><br><span class="line">因此可以不换行加上注释性内容, 而不会出现在代码块中</span><br></pre></td></tr></table></figure><p><img src="/img/area.png" alt="代码块"></p><p>效果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">    console.log(&quot;hello markdown!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>同一段落内换行, 可以在 需要换行的地方 两个空格 回车</p><p>段落换行, 需要文字之间出现空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">段落内部换行  (两个空格)</span><br><span class="line">换行</span><br><span class="line"></span><br><span class="line">段落1</span><br><span class="line"></span><br><span class="line">段落2</span><br></pre></td></tr></table></figure><p>效果</p><p>段落内部换行<br>换行</p><p>段落1</p><p>段落2</p>]]></content>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
